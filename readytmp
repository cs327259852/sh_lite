#!/bin/bash
thread=30
fifofile="/tmp/$$.fifo"
while [[ $# -ge 1 ]]; do
    case $1 in
        -d|--directory )
            dir=$2
	    if [ "$2" == "" ];then
	    	echo "directory cant be empty!"
		exit 8
	    fi	
            shift 2
            ;;
    	-t|--table )
	    tablefile=$2
    	    if [ "$2" == "" ];then
	    	echo "tablefile cant be empty!"
    		exit 8
	    fi
	    shift 2
	    ;;
    	-c|--configfile )
	    configfile=$2
    	    if [ "$2" == "" ];then
	    	echo "configfile cant be empty!"
    		exit 8
	    fi
	    shift 2
	    ;;		 
    	-start|--startdate )
	    startdate=$2
    	    if [ "$2" == "" ];then
	    	echo "startdate cant be empty!"
    		exit 8
	    fi
	    shift 2
	    ;;	
    	-end|--enddate )
	    enddate=$2
    	    if [ "$2" == "" ];then
	    	echo "enddate cant be empty!"
    		exit 8
	    fi
	    shift 2
	    ;;	   
        -b|--branch )
            branch=$2
	    if [ "$2" == "" ];then
	    	echo "branch cant be empty!"
		exit 8
	    fi		
            shift 2
            ;;
        * )
            echo "usage: $0 -d dir -b FDW -c db.config -t tables.txt -start 20200101 -end 20210201"
	    exit 8 
            shift   
            ;;
    esac
done

if [ "${dir}" == "" ];then
echo "directory cant be empty!"
exit 8
fi
if [ "${branch}" == "" ];then
echo "branch cant be empty!"
exit 8
fi
if [ -d ${dir} ]
	then echo "${dir}目录已存在"
	exit 8	
fi


confFile=${configfile}
tableFile=${tablefile}
# 设置IFS,将分隔符设置为换行符
OLDIFS=$IFS
IFS=$'\n'
# 读取文件中的内容到数组中
confArr=($(cat $confFile))
tables=($(cat $tableFile))
# 恢复之前的设置
IFS=$OLDIFS
mkdir -p ${dir}
cd ${dir}

starttime=$(date +%s)

declare -A dbConfMap

for i in "${!confArr[@]}";
do
{
	val=${confArr[$i]}
	kvpairArr=(${val//=/ })
	dbConfMap["${kvpairArr[0]}"]="${kvpairArr[1]}"
}
done

#王燕中间数据库配置
oggmiduser=${dbConfMap["oggmiduser"]}
oggmidhost=${dbConfMap["oggmidhost"]}
oggmidpwd=${dbConfMap["oggmidpwd"]}
oggmidservice=${dbConfMap["oggmidservice"]}

#b2b业务库配置
b2bbizhost=${dbConfMap["b2bbizhost"]}
b2bbizuser=${dbConfMap["b2bbizuser"]}
b2bbizpwd=${dbConfMap["b2bbizpwd"]}
b2bbizdb=${dbConfMap["b2bbizdb"]}

#ERP集中库配置
erpcenterhost=${dbConfMap["erpcenterhost"]}
erpcenterport=${dbConfMap["erpcenterport"]}
erpcenteruser=${dbConfMap["erpcenteruser"]}
erpcenterpwd=${dbConfMap["erpcenterpwd"]}
erpcenterservice=${dbConfMap["erpcenterservice"]}

#validate库配置
validhost=${dbConfMap["validhost"]}
validuser=${dbConfMap["validuser"]}
validpwd=${dbConfMap["validpwd"]}
validdb=${dbConfMap["validdb"]}

mid_="mid_"
valid_="valid_"
erp_="erp_"
b2b5_="b2b5_"

function pinger(){
	
		mkfifo $fifofile
		exec 4<>${fifofile}
		rm -rf ${fifofile}
		for i in `seq $thread`
		do
			echo >&4
		done
	

	where=" where branchid='${branch}'"
	for i in "${!tables[@]}";   
	do
	read -u 4
	{
		tablename=${tables[${i}]}

		tablename=${tables[${i}]}
		field="pk||','|| to_char(lastmodifytime,'yymmddhh24miss')"
		#warning:must be ends of ';',otherwise no results back, f**k oracle!!!!!!!
		# to_char(lastmodifytime, 'yyyy-mm-dd hh24:mi:ss') < '2021-08-13 14:00:00' and to_char(lastmodifytime, 'yyyy-mm-dd hh24:mi:ss') > '2021-07-01 00:00:00' 
		oracleSelectSql="select ${field} from ${tablename} where to_char(lastmodifytime, 'yyyymmdd hh24:mi:ss') < '${enddate} 00:00:00' and to_char(lastmodifytime, 'yyyymmdd hh24:mi:ss') >= '${startdate} 00:00:00';"
		#erp database
		{
		sqlplus ${erpcenteruser}/${erpcenterpwd}@${erpcenterhost}:${erpcenterport}/${erpcenterservice} <<!
			set linesize 2000
			set colsep ''
			set heading off
			set feedback off
			set pagesize 0
			set verify off
			set newp none
			set echo off
			spool $(pwd)/${erp_}${tablename}
			${oracleSelectSql}
			spool off
!
		} 1>/dev/null &
		{
		sqlplus ${oggmiduser}/${oggmidpwd}@${oggmidhost}:${erpcenterport}/${oggmidservice} <<!
			set linesize 2000
			set colsep ''
			set heading off
			set feedback off
			set pagesize 0
			set verify off
			set newp none
			set echo off
			spool $(pwd)/${mid_}${tablename}
			${oracleSelectSql}
			spool off	
!
		} 1>/dev/null &
		wait
		mv ${mid_}${tablename}.lst ${mid_}${tablename} && sed -i -e"1d" -e"\$d" ${mid_}${tablename} 
		mv ${erp_}${tablename}.lst ${erp_}${tablename} && sed -i -e"1d" -e"\$d" ${erp_}${tablename} 
		wc -l ${mid_}${tablename} ${erp_}${tablename} >> snapshot.txt
		echo "${tablename}" > ${tablename}.txt
		compareTmp -d ./ -t $(pwd)/${tablename}.txt && rm ${mid_}${tablename} ${erp_}${tablename} ${tablename}.txt
		echo >&4
	}&
	done
	wait
	exec 4>&-
}

pinger
endtime=$(date +%s)
echo "waste time:$(expr ${endtime} - ${starttime})"
